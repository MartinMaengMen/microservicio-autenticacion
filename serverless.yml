org: marting199612
app: microservicios
service: authentication-lambda
frameworkVersion: '3'
plugins:
  - serverless-auto-swagger
custom:
    secrets: ${file(secrets.json)}
    autoswagger:
        apiType: 'http'
provider:
  name: aws
  runtime: nodejs14.x
  region: 'sa-east-1'
  environment:
    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}
  #Permite escribir en la base de datos que se creo en resources
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - arn:aws:dynamodb:sa-east-1:571202862746:table/users
functions:
  verify-token:
    handler: src/functions/authorizeLambda.handler
  register:
    handler: src/functions/userLambda.register
    events:
      - http:
          path: /authentication/register
          method: post    
  login:
    handler: src/functions/userLambda.login
    events:
      - http:
          path: /authentication/login
          method: post
  getUsers:
    handler: src/functions/userLambda.getUsers
    events:
      - http:
          path: /getusers
          method: get
          #Proteger rutas con jwt
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization 
            resultTtlInSeconds: 0
resources:
  Resources:
    users:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: users
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        
        